#fastapi-headless-service
#외부에서 접근불가
#내부에서만 가능
#port랑 targetport일단 안적어도됨
apiVersion: v1
kind: Service
metadata:
  name: stunning-headless-service #서비스 이름
spec:
  selector: 
    app: stunning-multi-pod #pod라벨 적기
  ports:
  - name: fastapi
    #port: 80 
    #targetPort: 80
  - name: mysql
    #port: 3305
    #targetPort: 3306 
  clusterIP: None
---
#fastapi, mysql pod create
apiVersion: v1
kind: Pod
metadata:
  name: multi-pod #pod의 name
  labels: #service가 어떤pod매칭할지 정할때 필요한 라벨  #pod의 label #key, value형태
    app: stunning-multi-pod
spec:
  containers:
    - name: stunning-container #container 이름
      image: stunning-server:latest
      ports:
        - containerPort: 80 
    -name: mysql-container
      image:
      ports:
        - containerPort: 3306
---
#deployment(ReplicaSet)
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: stunning-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stunning-pod #stunning-pod랑 match
      #replicaset은 template으로 pod port할당함
      #fastapi, mysql 두개의 컨테이너 넣기
      #replicaset에 의해 새로 만들어질 pod
  template:
    metadata:
      #name: stunning-deployment
      labels:
        app: stunning-pod
    spec:
      containers:
      - name: stunning-container
        image:
        ports:
          - containerPort: 80
      -name: mysql-container
        image:
        ports:
          - containerPort: 3306
---
#statefulset-controller
apiVersion: apps/v1
kind: StatefulSet
metadata: 
  name: stateful-stunning #statefulset 이름
spec:
  replicas: 1 #default는 1 #pod가 1개 만들어짐
  selector:
    matchLabels:
      app: stunning-multi-pod #pod라벨 
  serviceName: stunning_service  
  template:
    metadata:
      labels:
        app: stunning-multi-pod #pod라벨 적는다 
    spec:
      containers:
      - name: stunning-container #container 이름
        image: stunning_image
        ports:
        - containerPort: 80
        #volumeMounts:
        #- name: volume #마운트 할 볼륨의 이름(pv따로 만들기)
          #mountPath: #볼륨을 마운트할 컨테이너
      - name: mysql-container
        image: mysql
        ports:
        - containerPort: 3306 
        #volumeMounts:
        #- name: volume #마운트 할 볼륨의 이름(pv따로 만들기)
          #mountPath: #볼륨을 마운트할 컨테이너
  #volumeClaimTemplates: #pvc는 사용자가 pv에 하는 요청
  #- metadata:
   #     name: pvc #template에 의해서 pvc생성됨
    #spec:
      #accessModes: [ "ReadWriteOnce" ]
      #resources:
        #requests:
         # storage: 1Gi 
         

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1G

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: stunning-volume










          
  







  
