apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db #statefulset의 이름
spec: 
  selector:
    matchLabels:
      app: db
      app.kubernetes.io/name: db
  serviceName: db-write
  replicas: 2 #primary는 1개고 replica를 2개함
  #생성할 pod의 템플릿 정의함
  template:
    metadata:
      labels:
        app: db
        app.kubernetes.io/name: db
    spec:
      initContainers: #초기화 컨테이너가 두개 
      - name: init-mysql #첫번째 초기화 컨테이너 
        image: mysql:5.6 #설정파일 갖고오는 용도 #사용되는 xtrabackup 이미지
        command: #실행할 명령어 
        - bash
        - "c" #ordinal 변수에는 현재 pod의 숫자 ID저장됨(ex- mysql 0의 0)
        # echo [mysqld] > /mnt/conf.d/server-id.cnf      /mnt/conf.d/server-id.cnf파일을 생성한다. 
        # echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf      server-id 설정을 /mnt/conf.d/server-id.cnf파일에 추가한다. server-id값은 100+ordinal로 계산된다. ordinal이 0이면 server-id는 100이 된다. 이 값을 설정 파일에 추가해서 각 mysql서버가 고유한 server-id가지도록 한다. 
        # if [[ $ordinal -eq 0 ]]; then      ordinal이 0이면 이 pod는 primary서버로 설정된다. 
        # cp /mnt/config-map/primary.cnf /mnt/conf.d/      ordinal이 0일 경우  primary서버일 경우 primary.cnf파일을 /mnt/conf.d/ 디렉토리로 복사한다. primary.cnf는 primary 서버에 필요한 설정 포함한다.
        # else cp /mnt/config-map/replica.cnf /mnt/conf.d/     ordinal이 0이 아닌 경우 replica.cnf파일을 /mny/conf.d/ 디렉토리로 복사한다

        - | #현재 pod의 이름이 하이픈(-)으로 구분된 숫자로 끝나는지 확인. ||exit 1은 조건이 거짓일 경우, 스크립트는 상태코드 1을 반환하면서 종료된다. 예를들어서 mydb-0이면 참이라서 스크립트 계속 실행됨. 만약 mydb-primary면 정규 표현식과 매칭 안돼서 조건식 거짓임 ||exit 1에 의해서 스크립트 종료됨. 이거는 statefulset의 각 pod가 고유 ID를 가지도록 하고 이 ID기반으로 primary와 replica구분함
          set -ex
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1  
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql  #두번째 컨테이너 (상대방의 db에서 데이터 동기화 함)
        image: gcr.io/google-samples/xtrabackup:1.0
        command: # [[ $ordinal -eq 0 ]] && exit 0       mydb-0이면 스크립트 종료함 첫번째 pod는 primary이므로 다른 pod로부터 데이터 복사할 필요 없음 
        #ncat --recv-only mydb-$(($ordinal-1)).mydb 3307 | xbstream -x -C /var/lib/mysql        이전 pod에서 데이터베이스 백업을 받아온다, 이전 pod의 3307포트에서 백업 데이터 받는다, 받은 데이터를 /var/lib/mysql디렉토리에 추출한다
        #xtrabackup --prepare --target-dir=/var/lib/mysql      복제 준비를 위해 데이터를 복원함
        - bash
        - "-c"
        - |
          set -ex
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          [[ 'hostname' =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          ncat --recv-only mydb-$(($ordinal-1)).mydb 3307 | xbstream -x -C /var/lib/mysql
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: etc/mysql/conf.d
      containers:
      - name: mysql #얘는 메인 컨테이너 
        image: mysql:5.6 #5.7로 해야함
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD #여기서는 빈 비밀번호 허용함
          value: "1"
        ports: 
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d





